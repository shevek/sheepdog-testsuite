<configuration>

<!--
	<host id="A" host="10.144.11.103" user="maestro" password="maestro"
			sheep="/home/maestro/sheep_source/sheep/sheep"
			collie="/home/maestro/sheep_source/collie/collie" />
	<host id="B" host="10.144.11.109" user="maestro" password="maestro"
			sheep="/home/maestro/sheep_source/sheep/sheep"
			collie="/home/maestro/sheep_source/collie/collie" />
	<host id="C" host="10.144.11.116" user="maestro" password="maestro"
			sheep="/home/maestro/sheep_source/sheep/sheep"
			collie="/home/maestro/sheep_source/collie/collie" />
-->

<!--
	<host id="A" host="10.144.11.121" user="ubuntu" password="ubuntu"
			sheep="/home/ubuntu/sheep_source/sheep/sheep"
			collie="/home/ubuntu/sheep_source/collie/collie"
			cluster="zookeeper:localhost:2181" />
	<host id="B" host="10.144.11.122" user="ubuntu" password="ubuntu"
			sheep="/home/ubuntu/sheep_source/sheep/sheep"
			collie="/home/ubuntu/sheep_source/collie/collie"
			cluster="zookeeper:localhost:2181" />
	<host id="C" host="10.144.11.123" user="ubuntu" password="ubuntu"
			sheep="/home/ubuntu/sheep_source/sheep/sheep"
			collie="/home/ubuntu/sheep_source/collie/collie"
			cluster="zookeeper:localhost:2181" />
-->

	<sheep hostId="A" port="7000" directory="/tmp/sheepdog/7000" />
	<sheep hostId="A" port="7001" directory="/tmp/sheepdog/7001" />
	<sheep hostId="A" port="7002" directory="/tmp/sheepdog/7002" />
	<sheep hostId="A" port="7003" directory="/tmp/sheepdog/7003" />
	<sheep hostId="A" port="7004" directory="/tmp/sheepdog/7004" />
	<sheep hostId="A" port="7005" directory="/tmp/sheepdog/7005" />
	<sheep hostId="A" port="7006" directory="/tmp/sheepdog/7006" />
	<sheep hostId="A" port="7007" directory="/tmp/sheepdog/7007" />
	<sheep hostId="A" port="7008" directory="/tmp/sheepdog/7008" />
	<sheep hostId="A" port="7009" directory="/tmp/sheepdog/7009" />
	<sheep hostId="A" port="7010" directory="/tmp/sheepdog/7010" />
	<sheep hostId="A" port="7011" directory="/tmp/sheepdog/7011" />
	<sheep hostId="A" port="7012" directory="/tmp/sheepdog/7012" />

	<sheep hostId="B" port="7000" directory="/tmp/sheepdog/7000" />
	<sheep hostId="B" port="7001" directory="/tmp/sheepdog/7001" />
	<sheep hostId="B" port="7002" directory="/tmp/sheepdog/7002" />
	<sheep hostId="B" port="7003" directory="/tmp/sheepdog/7003" />
	<sheep hostId="B" port="7004" directory="/tmp/sheepdog/7004" />
	<sheep hostId="B" port="7005" directory="/tmp/sheepdog/7005" />
	<sheep hostId="B" port="7006" directory="/tmp/sheepdog/7006" />
	<sheep hostId="B" port="7007" directory="/tmp/sheepdog/7007" />
	<sheep hostId="B" port="7008" directory="/tmp/sheepdog/7008" />
	<sheep hostId="B" port="7009" directory="/tmp/sheepdog/7009" />
	<sheep hostId="B" port="7010" directory="/tmp/sheepdog/7010" />
	<sheep hostId="B" port="7011" directory="/tmp/sheepdog/7011" />
	<sheep hostId="B" port="7012" directory="/tmp/sheepdog/7012" />

	<sheep hostId="C" port="7000" directory="/tmp/sheepdog/7000" />
	<sheep hostId="C" port="7001" directory="/tmp/sheepdog/7001" />
	<sheep hostId="C" port="7002" directory="/tmp/sheepdog/7002" />
	<sheep hostId="C" port="7003" directory="/tmp/sheepdog/7003" />
	<sheep hostId="C" port="7004" directory="/tmp/sheepdog/7004" />
	<sheep hostId="C" port="7005" directory="/tmp/sheepdog/7005" />
	<sheep hostId="C" port="7006" directory="/tmp/sheepdog/7006" />
	<sheep hostId="C" port="7007" directory="/tmp/sheepdog/7007" />
	<sheep hostId="C" port="7008" directory="/tmp/sheepdog/7008" />
	<sheep hostId="C" port="7009" directory="/tmp/sheepdog/7009" />
	<sheep hostId="C" port="7010" directory="/tmp/sheepdog/7010" />
	<sheep hostId="C" port="7011" directory="/tmp/sheepdog/7011" />
	<sheep hostId="C" port="7012" directory="/tmp/sheepdog/7012" />

<!-- Utilities -->

	<test id="stat" auto="false" description="Utility: Retrieve status of all sheep.">
		<sheep-stat />
	</test>

	<test id="scan" auto="false" description="Utility: Scan all sheep for correctness.">
		<sheep-scan />
	</test>

	<test id="kill" auto="false" description="Utility: Kill all sheep.">
		<sheep-kill />
	</test>

	<test id="shutdown" auto="false" description="Utility: Shut down all sheep.">
		<cluster-shutdown />
	</test>

	<test id="wipe" auto="false" description="Utility: Wipe all sheep.">
		<sheep-wipe />
	</test>

<!-- Subroutines -->

	<test id="zookeeper_init" auto="false" description="Clean out ZK data.">
		<exec>
			sudo service zookeeper stop
			sudo rm -rf /var/lib/zookeeper/version-2/
			sudo mkdir -p /var/lib/zookeeper/version-2/
			sudo chown zookeeper:zookeeper /var/lib/zookeeper/version-2/
		</exec>
		<!-- Separating the 'exec's introduces a barrier. -->
		<exec>
			sudo service zookeeper start
		</exec>
	</test>

	<test id="zookeeper_settle" auto="false" description="Want after starting ZK sheep.">
		<sleep msecs="2000" />
	</test>

	<test id="zookeeper_settle" auto="false" description="Wait after killing ZK sheep.">
		<sleep msecs="3000" />
	</test>

	<test id="init" auto="false" description="Utility: Prepare for a new test suite.">
		<sheep-wipe />
		<subtest testId="zookeeper_init" />
	</test>

	<test id="check" auto="false" description="Utility: Check status of all sheep.">
		<sheep-stat status="RUNNING" check="true" />
		<sheep-scan />
	</test>

	<test id="start-small" auto="false" description="Utility: Start a small cluster.">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<sheep-start sheepId="A-7001" />
		<sheep-start sheepId="B-7000" />
		<sheep-start sheepId="B-7001" />
		<sheep-start sheepId="C-7000" />
		<sheep-start sheepId="C-7001" />
		<cluster-format copies="2" />
	</test>

	<test id="start-large" auto="false" description="Utility: Start a large cluster.">
		<subtest testId="init" />
		<sheep-start />
		<cluster-format copies="3" />
	</test>

	<test id="format-1" auto="false" description="Utility: Format with 1 copy.">
		<sheep-stat status="NEEDSFORMAT" />
		<cluster-format copies="1" />
		<!-- XXX sleep, else we get 'no active nodes' -->
		<sleep msecs="1000" />
		<subtest testId="check" />
	</test>

	<test id="format-2" auto="false" description="Utility: Format with 2 copies.">
		<sheep-stat status="NEEDSFORMAT" />
		<cluster-format copies="2" />
		<!-- XXX sleep, else we get 'no active nodes' -->
		<sleep msecs="1000" />
		<subtest testId="check" />
	</test>

	<test id="format-3" auto="false" description="Utility: Format with 3 copies.">
		<sheep-stat status="NEEDSFORMAT" />
		<cluster-format copies="3" />
		<!-- XXX sleep, else we get 'no active nodes' -->
		<sleep msecs="1000" />
		<subtest testId="check" />
	</test>

	<test id="exercise" auto="false" description="Utility: Exercise a cluster.">
		<!-- The varied sleeps here are to introduce jitter. -->
		<parallel repeat="10">

			<sequential repeat="3">
				<vdi-create name="test-vdi-0" size="102400" />
				<vdi-write name="test-vdi-0" />
				<vdi-read name="test-vdi-0" />
				<vdi-delete name="test-vdi-0" />
			</sequential>

			<sequential repeat="3">
				<sleep msecs="500" />
				<vdi-create name="test-vdi-1" size="102400" />
				<vdi-write name="test-vdi-1" />
				<vdi-read name="test-vdi-1" />
				<vdi-delete name="test-vdi-1" />
			</sequential>

			<sequential repeat="2">
				<sleep msecs="1000" />
				<vdi-create name="test-vdi-2" size="102400" />
				<vdi-write name="test-vdi-2" />
				<vdi-read name="test-vdi-2" />
				<vdi-delete name="test-vdi-2" />
			</sequential>

			<sequential repeat="2">
				<sleep msecs="1500" />
				<vdi-create name="test-vdi-3" size="102400" />
				<vdi-write name="test-vdi-3" />
				<vdi-read name="test-vdi-3" />
				<vdi-delete name="test-vdi-3" />
			</sequential>

			<sequential repeat="2">
				<sleep msecs="2000" />
				<vdi-create name="test-vdi-4" size="102400" />
				<vdi-write name="test-vdi-4" />
				<vdi-read name="test-vdi-4" />
				<vdi-delete name="test-vdi-4" />
			</sequential>

			<sequential repeat="2">
				<sleep msecs="2500" />
				<vdi-create name="test-vdi-5" size="102400" />
				<vdi-write name="test-vdi-5" />
				<vdi-read name="test-vdi-5" />
				<vdi-delete name="test-vdi-5" />
			</sequential>

			<sequential>
				<sleep msecs="3000" />
				<vdi-create name="test-vdi-6" size="102400" />
				<vdi-write name="test-vdi-6" />
				<vdi-read name="test-vdi-6" />
				<vdi-delete name="test-vdi-6" />
			</sequential>

			<sequential>
				<sleep msecs="3000" />
				<vdi-create name="test-vdi-7" size="102400" />
				<vdi-write name="test-vdi-7" />
				<vdi-read name="test-vdi-7" />
				<vdi-delete name="test-vdi-7" />
			</sequential>

			<sequential>
				<sleep msecs="3000" />
				<vdi-create name="test-vdi-8" size="102400" />
				<vdi-write name="test-vdi-8" />
				<vdi-read name="test-vdi-8" />
				<vdi-delete name="test-vdi-8" />
			</sequential>

			<sequential>
				<sleep msecs="3000" />
				<vdi-create name="test-vdi-9" size="102400" />
				<vdi-write name="test-vdi-9" />
				<vdi-read name="test-vdi-9" />
				<vdi-delete name="test-vdi-9" />
			</sequential>

		</parallel>

		<subtest testId="check" />
	</test>

<!-- Tests -->

	<!-- APPLIANCE-2115 -->
	<test id="simple-singlehost-master" groups="@release,@fails">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<!-- XXX delay -->
		<sheep-start hostId="A" delay="2000" />
		<subtest testId="format-1" />
		<vdi-create sheepId="A-7000" name="test-vdi" />
		<vdi-write sheepId="A-7001" name="test-vdi" />
		<subtest testId="check" />
		<vdi-delete sheepId="A-7002" name="test-vdi" />
		<subtest testId="check" />
	</test>

	<!-- APPLIANCE-2115 -->
	<test id="simple-singlehost-slave" groups="@release,@fails">
		<subtest testId="init" />
		<!-- XXX delay -->
		<sheep-start hostId="A" delay="3000" />
		<subtest testId="format-1" />
		<vdi-create sheepId="A-7002" name="test-vdi" />
		<vdi-write sheepId="A-7000" name="test-vdi" />
		<subtest testId="check" />
		<vdi-delete sheepId="A-7001" name="test-vdi" />
		<subtest testId="check" />
	</test>

	<test id="simple-multihost-master" groups="@release">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000,B-7000,C-7000" />
		<subtest testId="format-1" />
		<vdi-create sheepId="A-7000" name="test-vdi" />
		<vdi-write sheepId="B-7000" name="test-vdi" />
		<subtest testId="check" />
		<vdi-delete sheepId="C-7000" name="test-vdi" />
		<subtest testId="check" />
	</test>

	<test id="simple-multihost-slave" groups="@release">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000,B-7000,C-7000" />
		<subtest testId="format-1" />
		<vdi-create sheepId="C-7000" name="test-vdi" />
		<vdi-write sheepId="A-7000" name="test-vdi" />
		<subtest testId="check" />
		<vdi-delete sheepId="B-7000" name="test-vdi" />
		<subtest testId="check" />
	</test>

	<!-- Fails with collie hangs, reason unknown. -->
	<test id="simple-multihost-exercise" groups="@release,@fails">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<!-- XXX delay -->
		<sheep-start delay="2000" />
		<subtest testId="format-3" />
		<subtest testId="exercise" />
		<subtest testId="check" />
	</test>

	<!-- This does not fail with valgrind. :-( -->
	<!-- assertion failure: APPLIANCE-2110 -->
	<test id="joinstorm-preformat" groups="@release,@fails">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<subtest testId="zookeeper_settle" />
		<sheep-start sheepId="A-7001,A-7002,A-7003" />
		<sheep-start sheepId="A-7004,A-7005,A-7006" />
		<sheep-start sheepId="A-7007,A-7008,A-7009" />
		<subtest testId="zookeeper_settle" />
		<sheep-stat status="NEEDSFORMAT" />
		<cluster-format copies="1" />
		<subtest testId="check" />
		<!--
		<vdi-create sheepId="A-7000" name="test-vdi" write="true" />
		<vdi-write sheepId="A-7001" name="test-vdi" />
		<vdi-delete sheepId="A-7002" name="test-vdi" />
		-->
	</test>

	<test id="joinstorm-postformat-init" auto="false">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<cluster-format copies="1" />
	</test>

	<test id="joinstorm-postformat-fail" auto="false">
		<parallel>
			<sheep-start sheepId="A-7001" />
			<sheep-start sheepId="A-7002" />
			<sheep-start sheepId="A-7003" />
		</parallel>
	</test>

	<test id="joinstorm-postformat" groups="@release">
		<subtest testId="joinstorm-postformat-init" />
		<subtest testId="joinstorm-postformat-fail" />
	</test>

	<test id="fpe-init" auto="false">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<sheep-start sheepId="A-7001,A-7002" />
		<sheep-start sheepId="B-7000,B-7001,B-7002" />
		<subtest testId="format-2" />

		<vdi-create sheepId="A-7000" name="test-vdi" size="20480" />
		<vdi-write sheepId="A-7000" name="test-vdi" offset="0" length="20480" />
		<vdi-read sheepId="B-7000" name="test-vdi" offset="0" length="20480" />
	</test>

	<test id="fpe-fail" auto="false">
		<sheep-start sheepId="C-7000" valgrind="true" />
		<!--
		<sheep-start sheepId="C-7000,C-7001,C-7002" valgrind="true" />
		-->
		<sleep msecs="1000" />
		<!-- Fails because the sheep on C died with an FPE. -->
		<vdi-read sheepId="C-7000" name="test-vdi" offset="0" length="20480" />
	</test>

	<test id="fpe-stress" auto="false">
		<sheep-start sheepId="C-7001,C-7002" />
		<sleep msecs="2000" />
		<vdi-read sheepId="C-7002" name="test-vdi" offset="0" length="20480" />
	</test>

	<test id="fpe" groups="@release">
		<subtest testId="fpe-init" />
		<subtest testId="fpe-fail" />
	</test>

	<test id="desync-init" auto="false">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" />
		<subtest testId="format-1" />
		<!-- It needs enough data to really barf. -->
		<vdi-create sheepId="A-7000" name="test-vdi" size="300000" />
		<vdi-write sheepId="A-7000" name="test-vdi" offset="0" length="300000" />
		<!-- vdi-read sheepId="A-7000" name="test-vdi" offset="0" length="300000" / -->
	</test>

	<test id="desync-fail" auto="false">
		<sheep-start sheepId="A-7001" />
		<!-- Allow enough extra time for recovery to kick in. -->
		<sleep msecs="5000" />
		<vdi-read sheepId="A-7001" name="test-vdi" offset="0" length="300000" />
	</test>

	<test id="desync" groups="@release">
		<subtest testId="desync-init" />
		<subtest testId="desync-fail" />
	</test>

	<!-- APPLIANCE-2075 -->
	<test id="valgrind" groups="@release,@fails">
		<subtest testId="init" />
		<!-- XXX delay, but fails anyway -->
		<sheep-start sheepId="A-7000,A-7001,A-7002" valgrind="true" delay="1000" />
		<subtest testId="format-1" />
		<vdi-create sheepId="A-7000" name="test-vdi" size="102400" />
		<vdi-write sheepId="A-7000" name="test-vdi" offset="0" length="102400" />
		<vdi-read sheepId="A-7000" name="test-vdi" offset="0" length="102400" />
		<cluster-shutdown />
		<sleep msecs="3000" />
		<sheep-stat />
	</test>

	<test id="no-vnode-write">
		<subtest testId="init" />
		<sheep-start sheepId="A-7000" vnodes="0" />
		<cluster-format copies="1" />
		<assert-fail>
			<vdi-create name="test-vdi" size="1024" />
		</assert-fail>
	</test>

	<test id="restart_assert_common" auto="false">
		<subtest testId="restart_zk_settle" />
	</test>

	<test id="restart_assert_running_ok" auto="false">
		<subtest testId="restart_assert_common" />
		<sheep-stat status="RUNNING" check="true" />
		<vdi-list sheepId="A-7000" />
		<vdi-read sheepId="A-7000" name="test-vdi" />
		<sheep-stat status="RUNNING" check="true" />
		<sheep-scan />
	</test>

	<test id="restart_assert_running_missing" auto="false">
		<subtest testId="restart_assert_common" />
		<sheep-stat status="RUNNING" check="true" />
		<assert-fail message="No VDI found|No object found">
			<!-- Sometimes succeeds, but should probably fail. -->
			<vdi-list sheepId="A-7000" />
			<!-- Always fails. -->
			<vdi-read sheepId="A-7000" name="test-vdi" />
		</assert-fail>
		<assert-fail message="Cluster is running">
			<cluster-recover sheepId="A-7000" />
		</assert-fail>
		<assert-fail message="No VDI found|No object found">
			<!-- One of these will fail, not sure which.
			   - Depends on whether it loses the first block
			   - of the VDI or a subsequent block. -->
			<vdi-list sheepId="A-7000" />
			<vdi-read sheepId="A-7000" name="test-vdi" />
		</assert-fail>
		<sheep-stat status="RUNNING" check="true" />
		<sheep-scan />
	</test>

	<test id="restart_assert_recover_ok" auto="false">
		<subtest testId="restart_assert_common" />
		<sheep-stat status="WAITING" check="true" />
		<assert-fail message="Waiting for other nodes">
			<!-- Sometimes succeeds, but should probably fail. -->
			<vdi-list sheepId="A-7000" />
			<vdi-read sheepId="A-7000" name="test-vdi" />
		</assert-fail>
		<cluster-recover sheepId="A-7000" />
		<vdi-list sheepId="A-7000" />
		<vdi-read sheepId="A-7000" name="test-vdi" />
		<sheep-stat status="RUNNING" check="true" />
		<sheep-scan />
	</test>

	<test id="restart_assert_recover_missing" auto="false">
		<subtest testId="restart_assert_common" />
		<sheep-stat status="WAITING" check="true" />
		<assert-fail message="Waiting for other nodes">
			<!-- Sometimes succeeds, but should probably fail. -->
			<vdi-list sheepId="A-7000" />
			<!-- Always fails. -->
			<vdi-read sheepId="A-7000" name="test-vdi" />
		</assert-fail>
		<cluster-recover sheepId="A-7000" />
		<assert-fail message="No VDI found|No object found">
			<!-- One of these will fail, not sure which.
			   - Depends on whether it loses the first block
			   - of the VDI or a subsequent block. -->
			<vdi-list sheepId="A-7000" />
			<vdi-read sheepId="A-7000" name="test-vdi" />
		</assert-fail>
		<sheep-stat status="RUNNING" check="true" />
		<sheep-scan />
	</test>

	<test id="restart_assert_unformatted" auto="false">
		<subtest testId="restart_assert_common" />
		<sheep-stat status="NEEDSFORMAT" check="true" />
		<assert-fail message="Waiting for cluster to be formatted">
			<!-- Sometimes succeeds, but should probably fail. -->
			<vdi-list sheepId="A-7000" />
			<!-- Always fails. -->
			<vdi-read sheepId="A-7000" name="test-vdi" />
		</assert-fail>
	</test>

	<!-- Passes -->
	<test id="restart_RRRR_c1">
		<cluster-restart pattern="RRRR" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Passes -->
	<test id="restart_RRRR_c1_zk" groups="@zk">
		<subtest testId="init" />
		<cluster-restart pattern="RRRR" copies="1" sheepId="A-7000" hostId="A"
			cluster="zookeeper:localhost:2181"
			valgrind="true" />
		<subtest testId="restart_zk_settle" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Passes -->
	<test id="restart_RRRR_c3">
		<cluster-restart pattern="RRRR" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- XXX -->
	<test id="restart_RRRR_c3_zk" groups="@zk">
		<subtest testId="init" />
		<cluster-restart pattern="RRRRRRR" copies="3" sheepId="A-7000" hostId="A"
			cluster="zookeeper:localhost:2181"
			valgrind="true" />
		<sleep msecs="20000" />
		<subtest testId="restart_zk_settle" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Fails because of APPLIANCE-2069 -->
	<test id="restart_RRRRN_c1">
		<cluster-restart pattern="RRRRN" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Fails because of APPLIANCE-2069 -->
	<test id="restart_RRRRN_c3">
		<cluster-restart pattern="RRRRN" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- XXX -->
	<test id="restart_RRRRN_c3_zk" groups="@zk">
		<subtest testId="init" />
		<cluster-restart pattern="R__RRRRRRN" copies="3" sheepId="A-7000" hostId="A"
			cluster="zookeeper:localhost:2181"
			valgrind="true" />
		<sleep msecs="20000" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Fails because of APPLIANCE-2069 -->
	<test id="restart_RRNRR_c1">
		<cluster-restart pattern="RRNRR" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- XXX -->
	<test id="restart_RRNRR_c1_zk" groups="@zk">
		<subtest testId="init" />
		<cluster-restart pattern="RRNRR" copies="1" sheepId="A-7000" hostId="A"
			cluster="zookeeper:localhost:2181" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Fails because of APPLIANCE-2069 -->
	<test id="restart_RRNRR_c3">
		<cluster-restart pattern="RRNRR" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Passes (correctly dies) -->
	<test id="restart_RRRRX_c1">
		<cluster-restart pattern="RRRRX" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_missing" />
	</test>

	<!-- Passes, but requires farm backend. -->
	<test id="restart_RRRRX_c3">
		<cluster-restart pattern="RRRRX" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_ok" />
	</test>

	<!-- Fails, because of APPLIANCE-2068 -->
	<test id="restart_RRRRX_c3_simple" auto="false">
		<cluster-restart pattern="RRRRX" copies="3" sheepId="A-7000" hostId="A"
			backend="simple" />
		<subtest testId="restart_assert_recover_ok" />
	</test>

	<!-- Fails because recovery can't detect a W node. -->
	<test id="restart_RWRRRR_c1">
		<cluster-restart pattern="RWRRRR" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_missing" />
	</test>

	<!-- Fails because recovery can't detect a W node,
	   - or because of APPLIANCE-2069, very hard to tell. -->
	<test id="restart_RWRRRR_c3">
		<cluster-restart pattern="RWRRRR" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Difficult to say because of APPLIANCE-2069 -->
	<test id="restart_RRNRRX_c1">
		<cluster-restart pattern="RRNRRX" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_missing" />
	</test>

	<!-- Would pass, incorrectly, but fails,
	   - probably because of APPLIANCE-2068 or APPLIANCE-2069 -->
	<test id="restart_RRNRRX_c3">
		<cluster-restart pattern="RRNRRX" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_ok" />
	</test>

	<!-- ?? Passes incorrectly, because of N node. -->
	<test id="restart_RRRNXX_c1">
		<cluster-restart pattern="RRRNR" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_missing" />
	</test>

	<!-- ?? Fails, ticket APPLIANCE-2068 -->
	<test id="restart_RRRNXX_c3">
		<cluster-restart pattern="RRRNXX" copies="3" sheepId="A-7000" hostId="A" />
		<echo message="This should be recover_ok, but the N node kicks it online." />
		<subtest testId="restart_assert_running_ok" />
	</test>

	<!-- Passes -->
	<test id="restart_RRRRXXXX_c3">
		<cluster-restart pattern="RRRRXXXX" copies="3" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_missing" />
	</test>

	<!-- Fails because all the R sheep suicide with invalid epoch -->
	<!-- Test fails because the first sheep can't be formatted. -->
	<!--
	<test id="restart_NRRRR_c1">
		<cluster-restart pattern="NRRRR" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_recover_missing" />
	</test>
	-->

	<!-- Fails because all the R sheep suicide with invalid epoch -->
	<test id="restart_WRRRR_c1">
		<cluster-restart pattern="WRRRR" copies="1" sheepId="A-7000" hostId="A" />
		<subtest testId="restart_assert_unformatted" />
	</test>

</configuration>
